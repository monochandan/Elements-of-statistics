#####
1 : 10 + 10
1 : 10 + 1 : 5
1 : 10 + 1 : 3
#####
##### Assignment operator
#####
x <- c(20, 19, 25, 1)
print(x)
y <- c(9, 10, 4, 28)
(z <-(x + y))
#####
##!!!!!!!case sensitive!!!!!!!
###to see current contents
ls()### it is also a vector
x
###save as external data set in same folder
save(x, file="x.Rdata")
save(x,y,z, file = "Vector.Rdata")
### Remove the vector if it is not useful anymore
rm(x)
ls()
##### again load the vector data
### !!!!!important the data (x.Rdata) should be in the same file of the R script
load("x.Rdata")
x
#### Load data from one file and save to another file
some_name <- rep(1,5)
some_name
save(some_name, file= "some_other_name.Rdata")
new_name <- get(load("some_other_name.Rdata"))
save(new_name, file="some_other_name_again.Rdata")
ls()
rm(some_other_name)
x <- c(20, 19, 25, 1)
print(x)
y <- c(9, 10, 4, 28)
(z <-(x + y))
sort(x)
sort(x, decreasing = TRUE)
some_vector <- c(seq(1, 20, 2), 1 : 10, seq(3, 30, 3))
some_vector
order(x)
x
order(x)
order(x, decreasing = TRUE)
rev(order(x))
some_vector[1]
some_vector[1:10]
some_vector[-(1:20)]
some_vector[-(1:20)]
some_vector[c(1,3,6,9,11,13)]
some_vector[c(rep(1,3), rep(3, 3), rep(6,3), rep(9,3), rep(11, 3), rep(13, 3))]
some_vector[c(1,3,6,9,11,13)][3]
some_vector[c(1,3,6,9,11,13)][3,11]
some_vector[c(1,3,6,9,11,13)][3][11]
some_vector[c(1,3,6,9,11,13)][3]
some_vector[c(1,3,6,9,11,13)][6]
sum(a)
a <- c(10, 2, 20)
sum(a)
length(a)
cumsum(a)
prod(a)
cumprod(a)
cummax(a)
cummin(a)
cummax(1:10)
a <- c(10, 2, 21)
sum(a)
length(a)
###cumulative sum
cumsum(a)
prod(a)
cumprod(a)
cummax(a)
cummin(a)
cummax(1:10)
a <- c(10, 2, 20)
sum(a)
length(a)
###cumulative sum
cumsum(a)
prod(a)
cumprod(a)
cummax(a)
cummin(a)
cummax(1:10)
min(a)
max(a)
mean(a)
range(a)
b <- c(pi, 2.71828, 6.52525)
round(b)
round(b, digits = 2)
round(b,  digits = -1)
floor(b)
ceiling(b)
signif(1257.256, 5)
signif(4)
signif(1245.233, 4)
signif(1257.256, 3)
signif(1253.556, 3)
trunc(c(-2020.8, 2020.8))
sink("Test.txt")
5 - 10
10 - 10
0 + -0
10 + 2 / 8
sink()
#####
##### Vector
######
c(1, 2, 3, 4, 5, 6, 7, 8)
seq(from= 1, to = 10, by = 1)
1:10
#####
###### to get help
#####
?seq
??Logistic
apropos("sink")
help.start()
apropos("seq")
#####
##### sequence
#####
seq(1, 10, 1)
seq(from= 10, to= 1, by = -1)
seq(to = 20, by= -5, length.out = 5)
seq(to = 5, by = 1) #default argument for to and from is 1
##### repeat
######
##### each --> taking each seperate number from vector
##### times --> taking each vactor and printing n times
rep(29,5)
rep(c(2, 9),times= 5)
rep(c(2,9), each = 4)
rep(c(2,9), each = 4, times = 2)
rep(c(2,9), times = 2, each = 4)
###### vectorization
#####
0 : 10
10 : 0
0 : 10 + 10 : 0
sqrt(c(1, 6, 36, 16, 144)) ## sqrt is vectorize function
##### Recycling
#####
1 : 10 + 10
1 : 10 + 1 : 5
1 : 10 + 1 : 3
#####
##### Assignment operator
#####
x <- c(20, 19, 25, 1)
print(x)
y <- c(9, 10, 4, 28)
(z <-(x + y))
#####
##!!!!!!!case sensitive!!!!!!!
###to see current contents
ls()### it is also a vector
x
###save as external data set in same folder
save(x, file="x.Rdata")
save(x,y,z, file = "Vector.Rdata")
### Remove the vector if it is not useful anymore
rm(x)
ls()
##### again load the vector data
### !!!!!important the data (x.Rdata) should be in the same file of the R script
load("x.Rdata")
x
#### Load data from one file and save to another file
some_name <- rep(1,5)
some_name
save(some_name, file= "some_other_name.Rdata")
new_name <- get(load("some_other_name.Rdata"))
save(new_name, file="some_other_name_again.Rdata")
ls()
rm(some_other_name)
1 : 10 + 1 : 3
some_name <- rep(1,5)
some_name <- rep(1,5)
some_name
load("same_other_name.Rdata")
new_vec <- get(load("same_other_name.Rdata"))
new_vec <- get(load("some_other_name.Rdata"))
new_vec
x <- c(20, 19, 25, 1)
print(x)
y <- c(9, 10, 4, 28)
(z <-(x + y))
sort(x)
sort(x, decreasing = TRUE)
some_vector <- c(seq(1, 20, 2), 1 : 10, seq(3, 30, 3))
some_vector
x
## giving the index number for the value in ascending order
order(x)
## giving the index number for the value in descending order
order(x, decreasing = TRUE)
rev(order(x))
some_vector[1]
some_vector[1:10]
### it is removing (only for this command... just hiding) first 20 vector and showing the last remaining vectors
some_vector[-(1:20)] ### !!!!!parenthesis is important ()
##### pick vector values from given location
some_vector[c(1,3,6,9,11,13)]
### now repeat the vectors from given location
some_vector[c(rep(1,3), rep(3, 3), rep(6,3), rep(9,3), rep(11, 3), rep(13, 3))]
### choosing the vector values form given locations
##### 1,2,3,4,5,6.... we are taking 6th ( 13 ) index from the selected indexes
##### and printing the stored value on that index
some_vector[c(1,3,6,9,11,13)][6]
###### analyze vectors
a <- c(10, 2, 20)
sum(a)
length(a)
###cumulative sum
cumsum(a)
prod(a)
cumprod(a)
###after every element calculate the max value e.g - after 1th elem. 10 is big
##### after 2th element also 10 is big
##### after 3rd element 20 is big
cummax(a)
#### same as min but calculate the minimum value after every index
cummin(a)
cummax(1:10)
min(a)
max(a)
mean(a)
range(a)
b <- c(pi, 2.71828, 6.52525)
round(b)
round(b, digits = 2)
round(b,  digits = -1)#
####lower integer
floor(b)
####next bigger integer
ceiling(b)
#### round to some significant digit
signif(1257.256, 5)
signif(1245.233, 4)
signif(1257.256, 3)
signif(1253.556, 3)
#### round to next integer towords 0
trunc(c(-2020.8, 2020.8))
some_vector[-(5:20)]
x
x <- c(1, 2, 3, 4, 5, 6)
x
mod(x)
mode(x)
mode(l_part)
l_part <- c(TRUE, FALSE)
mode(l_part)
r_part <- 1.25
mode(r_part)
(mode(l_part, c_part))
(mode(l_part, r_part))
mode(r_part)
(mode(l_part, r_part))
(c1<- c(l_part, r_part))
mode(c1)
(c_part <- complex(real = 1, imaginary = 3))
mode(c_part)
(c2 <- c(c1, c_part))
mode(c2)
(c3 <- c(c2, ch_part))
ch_part <- "Abd"
(c3 <- c(c2, ch_part))
mode(c3)
c3[1] + c3[3]
two_character <- character()
two_character
two_character <- character(2)
two_character
two_character <- logical(2)
two_character
two_character <- numeric(2)
two_character
two_character <- c(0, 2)
two_character <- c(0, 2, 3)
two_character
two_character <- c(0, 2)
as.logical(two_character)
two_character[] <- c(0, 2)
two_character[] <- c(0, 2,3)
two_character <- numeric(3) ##having a vector for 2 numeric values
two_character[] <- c(0, 2,3)
two_character[] <- c(0, 2)
two_character <- numeric(2) ##having a vector for 2 numeric values
two_character[] <- c(0, 2)
as.logical(two_character) ###forcing and converting to another type
as.numeric(two_character)
as.numeric(complex(real= 2, imaginary = 1))
b <- c(pi, 2.71828, 6.52525)
b == pi
b!= pi
b < 3
b[1] >= 3
b[1]>3 & b[3]<10
b[1]>3 & b[3]>10
b[1] < 3 | b[3] < 10
xor(b[1] > 3 | b[3] < 10)
xor(b[1] > 3, b[3] < 10)
xor(b[1]>3, b[3] >10)
all(b>3)
any(b > 3)
1:1000 %% 3 == 0
1:50 %% 3 == 0
sum(1:50 %% 3 == 0)
my_vec <-(1:50 %% 2 == 0)
my_vec
my_vec <- numeric(1:50 %% 2 == 0)
my_vec <- numeric(c(1:50 %% 2 == 0))
sum(1:50 %% 3 == 0)
1:50 %% 3 == 0
b != pi
check <- (b != pi)
check
b[check]
[1:length(b)][check]
(1:length(b))[check]
which(b != pi)
which.min(b)
which.max(b)
names(b)<-c("pi","e","six_and_change")
b
b[c("pi","six_and_change")]
TRUE & TRUE
T & T
T <- 0
T & T
number1 == number2
number1 <- -1
number2 <- -1^3
number1 == number2
identical(number1, number2)
is.numeric(c(number1, number2))
1 == as.integer(1)
identical(1, as.integer(1))
x <- c(1, 2, 3, 4, 5, 6)
x
mode(x)
l_part <- c(TRUE, FALSE)
mode(l_part)
r_part <- 1.25
mode(r_part)
(c1<- c(l_part, r_part))
mode(c1)
(c_part <- complex(real = 1, imaginary = 3))
mode(c_part)
(c2 <- c(c1, c_part))
mode(c2)
ch_part <- "Abd"
(c3 <- c(c2, ch_part))
mode(c3)
c3[1] + c3[3]
two_character <- numeric(2) ##having a vector for 2 numeric values
two_character ###empty now
two_character[] <- c(0, 2)
as.logical(two_character) ###forcing and converting to another type and
#######for that we are also loosing the real information
as.numeric(two_character)
as.numeric(complex(real= 2, imaginary = 1)) ###imaginary part discarded..... so information lost
b <- c(pi, 2.71828, 6.52525)
b == pi #vectorized function and comparing every element in b
###vectorize means ---> it will compare with every values in the vector
#### non vectorize means ----> it will compare
b != pi
b < 3
b[1] >= 3
b[1]>3 & b[3]<10
b[1]>3 & b[3]>10 ###false because one of this 2 condition are false
b[1] < 3 | b[3] < 10 #### true because one of this conditions are true
xor(b[1] > 3, b[3] < 10) ####false because both of them are true
xor(b[1]>3, b[3] >10) ### TRUE one of them are false
####### "&" and "|" operators are vectorize
####### the non vectorize version is "&&" and "||",,,,, should use when the vector have only one value
all(b>3) ### all values of b are not greater than 3, that's why FALSE
any(b > 3) #### some value of b are greater than 3 that's why TRUE
1:50 %% 3 == 0
sum(1:50 %% 3 == 0)
check <- (b != pi)
check
b[check] ###giving the values , which are not equal to pi
##because check vector stores the values by given condition
###if we want to get the locations of the TRUE values checked by check vector
(1:length(b))[check]
which(b != pi) ### giving the location of values which are not equal to pi
which.min(b) ###only gives location not values
which.max(b)
##set names for every elements in vector b
names(b)<-c("pi","e","six_and_change")
b
###printing vector values by the given name
b[c("pi","six_and_change")]
TRUE & TRUE
T & T
T <- 0
T & T
#### that's why prof saide that use the fuckig TRUE Not fucking T Cunt !!!!!!!
number1 <- -1
number2 <- -1^3
number1 == number2
identical(number1, number2)
is.numeric(c(number1, number2))
####difference between == and  identical
1 == as.integer(1)
identical(1, as.integer(1))
mode(1)
mode(as.integer(1))
(m1 <- matrix(1:16, nrow = 4, ncol = 4))
(m2 <- matrix(16:1, nrow = 4, ncol = 4))
(m2 <- matrix(16:1))
(m2 <- matrix(16:1, ncol = 4))
m1 + m2
m3 <-(matrix(1:16, nrow = 4, byrow = TRUE)) ##### first 4 number will be in first row
(m3 <-matrix(1:16, nrow = 4, byrow = TRUE)) ##### first 4 number will be in first row
t(m1)
m3[1,3]
m3[9] ###9th vector value column wise ----
m3[2, -1]
m3[2, -2] ####
m3[2, -1, drop = FALSE]
m3[, 1:2]
m3[3:4,]
to_manupulate <- seq(4, by= 4, length.out = 4)
m3[to_manupulate] <- 100
m3
to_manupulate <- seq(4, by= 3, length.out = 4)
to_manupulate <- seq(4, by= 3, length.out = 3)
m3[to_manupulate] <- 100
m3
to_manupulate <- seq(4, by= 4, length.out = 4)
m3[to_manupulate] <- 100
m3
(m3 <-matrix(1:16, nrow = 4, byrow = TRUE)) ##### first 4 number will be in first row ----> printing by row
to_manupulate <- seq(4, by= 4, length.out = 4)
m3[to_manupulate] <- 100
m3
(m4 <- c(1:4, nrow= 2)
m4
(m4 <- c(1:4, nrow= 2))
(m4 <- c(1:4, ncol= 2))
(m4 <- matrix(1:4, ncol= 2))
m4
rbind(m4, c(5,6))
rbind(m4, c(3,5))
cbind(m4, c(5,6))
m5 <- matrix(1:6, ncol=2)
m5 <- matrix(1:6, ncol=3)
(m5 <- matrix(1:6, ncol=3))
(m5 <- matrix(1:6, ncol=2))
(m6 <- matrix(5:15, nrow = 3 ))
(m6 <- matrix(5:16, nrow = 3 ))
m5 %*% m6
(m5 <- matrix(1:6, ncol= 3))
(m6 <- matrix(10:5, nrow = 3))
m5 %*% m6
(m7 <- matrix(c(1,2,2,3,), ncol = 2))
(m7 <- matrix(c(1,2,2,3), ncol = 2))
solve(m7)
m7 %*% solve(m7)
eigen(m7)
dim(m7)
m5
nrow(m5)
ncol(m5)
)
length(m5)
rowSums(m5)
colSums(m5)
m5
m3
diag(m3)
diag(m3) <- 3
(diag(m3) <- 3)
m3
diag(2,2)
diag(2)
m5
colnames(m5)<- c("Veriable1","Veriable2","Veriable3")
m5
(m5_new <-c(m5, ID))
ID <- c("ID1","ID1")
(m5_new <-c(m5, ID))
(m5_new <-matrix(m5, ID))
(m5_new <- cbind(m5, ID))
mode(m5_new)
mean(m5_new(,"Veriable1"))
mean(m5_new[,"Veriable1"])
HairEyeColor
?HairEyeColor
HairEyeColor["Black", "Brown", "Female"]
HairEyeColor["Black", "Brown"]
dim(HairEyeColor)
HairEyeColor["blond", "", "Female"]
HairEyeColor["Blond", "", "Female"]
HairEyeColor["Blond", " ", "Female"]
HairEyeColor["Blond", , "Female"]
HairEyeColor["Red",,]
HairEyeColor[,"Brown",]
mod(HairEyeColor)
mod(HairEyeColor)
mode(HairEyeColor)
HairEyeColor[1,1,1] <- "50"
HairEyeColor
mode(HairEyeColor)
