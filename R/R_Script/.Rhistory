numeric(2)
two_numbers <- numeric(2) ## vectors of 0's
two_numbers  <- c(0, 5)
as.logical(two_numbers)
two_numbers  <- c(1, 5)
source("~/EOS/prep/R_Script/11_nov_practice.R", echo=TRUE)
two_numbers  <- c(1, 5)
as.logical(two_numbers)
two_numbers  <- c(1, -1)
as.logical(two_numbers)
two_numbers  <- c(0, 5)
as.logical(two_numbers)
as.numeric(complex(real = 2, imaginary = 1))
b
b == pi
b != pi
b < 3
b[1] >= 3
b[1] > 3 & b[3] > 10
b[1] < 3 | b[3] < 10
xor(b[1] < 3 , b[3] < 10)
xor(b[1] > 3 , b[3] < 10) # true if only one is true
all(b > 1)
all(b > 20)
sum(1:1000 %% 3 == 0)
(check <- b != pi)
b != pi
b[check]
(1: length(b))[check]
which( b != pi)
which.min(b)
which.max(b)
b
which.min(b)
which.max(b)
names(b) <- c("Pi", "e", "Six_and_change")
b[c("Pi", "Six_and_changes")]
b[c("Pi", "Six_and_change")]
names(b) <- c("Pi", "e", "Six_and_change") #### name the vector elements
b[c("Pi", "Six_and_change")]
number1 <- -1
number2 <. -1^3
number2 <-1^3
number2 <- -1^3
number1 == number2
identical(number1,  number2)
is.numeric(c(number1, number2))
1 == as.integer(1)
identical(1, as.integer(1))
(m1 <- matrix(data = 1:16, nrow = 4))
m2 <- matrix(16:1, ncol = 4)
m2
m1  + m2
(m3 <- matrix(1:16, nrow = 4, byrow = TRUE))
m1
t(m1)
m3[1]
m3
m3[1]
m3[3]
m3[9]
m3[1, 3]
m3[2, -1]
m3[2, -1, drop = FALSE]
print("hello world")
10 +
5
10 - 5
10 * 5
10 / 5
15 %/% 7
15 / 7
15 %% 7
sqrt(15)
10^5
exp(1)
log(exp(15))
log(exp(20))
abs(-15)
getwd()
sink("test.txt")
print("mono")
sink()
c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
seq(from = 1, to = 10, by = 1)
1:10
?seq
#seq(along.with = 5)
#seq(from = 1, to = 5, by = ((to - from)/(length.out - 1)), length.out = 1, along.with = 1)
seq(0, 1, length.out = 11)
seq(0, 1, length.out = 11) ## 0 and 1 streched into 11 numbers
apropos("seq")
seq(1, 10, 1)
seq(to = 20, by = 5, length.out = 5)
seq(to = 5, by = 1)
rep(29, times = 4)
rep(c(2,9), times = 4)
rep(c(2,9), each = 4)
rep(c(2,9), each = 4, time = 3)
rep(c(2,9), time = 4, each = 3)
0:10 + 10:0
sqrt(c(1, 16, 36, 144))
1:10  + 10
1:10 + 1:5
1:4 + 1:3
1:5 + 1:2
x<- c(20,19,25,1)
y <- c(9, 10, 4, 28)
(z <- x + y)
ls()
getwd()
x_data <- get(load("Vector.RData"))
x_data
some_name <- rep(1, 4)
some_name
save(some_name, file = "some_other_name.RData")
other_name <- get(load("some_other_name.RData"))
other_name
ls()
sort(x)
sort(x, decreasing = TRUE)
some_vector <- c(seq(2, 20, 2), 1:10, seq(3, 30, 3))
some_vector
order(x)
order(x, decreasing = TRUE)
some_vector[]
some_vector[1]
some_vector[1:10]
some_vector[-(1:20)] ## print values, start from right end and end at 20th index
some_vector[c(5, 10, 15)]
some_vector[c(rep(5, 5), rep(1, 5))]
some_vector[c(1, 5, 10)][3]
a <- c(10, 2, 20)
length(a)
sum(a)
cumsum(a)
prod(a)
cumprod(a)
mean(a)
min(a)
cummin(a)
max(a)
cummax(a)
range(a) ### (2 - 20)
b <- c(pi, 2.71828, 6.52525)
round(b)
round(b, 2)
round(b, -1)
floor(b)
ceiling(b)
y <- c(15.234, 14.238, 16.52525)
round(y, -1) # round between 10 and 20
signif(1251.48, 5) ## round 5th digit
signif(1252.48, 4) ## round 4th digit
signif(1252.48, 3) ## round 3rd digit
trunc(C(-2020.8, 2020.8))
trunc(c(-2020.8, 2020.8))
l_part <- c(TRUE, FALSE)
mode(l_part) # logical
r_part <- 1.25
mode(r_part) # numeric
(c1 <- c(l_part, r_part)) # logical  -> numeric
mode(c1)
c1
(c_part <- complex(real = -1, imaginary =  3)) # complex number
mode(c_part)
(c2 <- c(c1, c_part)) # numeric ->  complex
mode(c2)
ch_part <- "Abc"
(c3 <- c(c2, ch_part)) ### complex -> character
mode(c3)
c3[1] + c3[3]
c3[1]
two_numbers <- numeric(2) ## vectors of 0's
two_numbers  <- c(0, 5)
as.logical(two_numbers)
as.numeric(complex(real = 2, imaginary = 1)) ## imaginary part left over only real part is the output
b
b == pi  # vectorized output
b != pi # vectorized output
b < 3 # vectorized output
b[1] >= 3 # single output
b[1] > 3 & b[3] > 10 # true if both are true
b[1] < 3 | b[3] < 10
xor(b[1] > 3 , b[3] < 10) # true if only one is true, here TRUE TRUE -> FALSE
all(b > 1)
all(b > 20)
## how many multiples of 3 do the natural numbers from 1 through 1000 contain
sum(1:1000 %% 3 == 0)
(check <- b != pi)
b != pi
b[check] # only true elements are extracted
(1: length(b))[check]
which( b != pi)
b
which.min(b) ### index
which.max(b) ### index
names(b) <- c("Pi", "e", "Six_and_change") #### name the vector elements
b[c("Pi", "Six_and_change")]
number1 <- -1
number2 <- -1^3
number1 == number2
identical(number1,  number2)
is.numeric(c(number1, number2))
1 == as.integer(1)
identical(1, as.integer(1))
(m1 <- matrix(data = 1:16, nrow = 4)) ### filled by column
m2 <- matrix(16:1, ncol = 4)
m2
m1  + m2
(m3 <- matrix(1:16, nrow = 4, byrow = TRUE)) ### filled by row
m1
t(m1) ### matrix transpose
m3
m3[1]
m3[3]
m3[9]
m3[1, 3]
m3[10]
m3[1, 3]
m3[2, -1]
m3[, 1:2]
m3[3:4, ]
to_manipulate <- seq(4, by = 4, length.out = 4)
to_manipulate
m3
m3[to_manipulate] <- 100 ## recycling
m3
m3[to_manipulate] <- 100 ## recycling --- column wise indexes 4, 8,12, 16 value will be 100 for all 4 places
m3
(m4 <- matrix(1:4, ncol = 2))
rbind(m4, c(3,5))
source("~/EOS/prep/R_Script/11_nov_practice.R", echo=TRUE)
m4
rbind(m4, c(3,5))
cbind(m4, c(5,6))
(m5 <- matrix(1:6, ncol = 3))
(m6 <- matrix(10:5, nrow = 3))
m5 %/% m6
m5 %*% m6
(m7 <- matrix(c(1, 2, 2, 3), ncol = 2))
solve(m7)
m7 %*% solve(m7)
eigen(m7)
dim(m5)
nrow(m5)
ncol(m5)
length(m5)
rowsum(m5)
rowSums(m5)
m5
colSums(m5)
m3
dig(m3)
diag(m3)
diag(m3) <- 3
m3
diag(2)
m5
(m5_new <- cbind(m5, id))
col_names <- c("variable1", "variable2", "variable3")
id <- c("I01", "I02")
(m5_new <- cbind(m5, id))
colnames(m5) <- c("variable1", "variable2", "variable3")
id <- c("I01", "I02")
(m5_new <- cbind(m5, id))
mean(m5_new[, "variable1"])
mode(m5_new)
HairEyeColor
dim(HairEyeColor)
HairEyeColor["Brown", "Hazel", "Female"]
HairEyeColor["Brown", "Hazel", "Female"] # hair eye sex
HairEyeColor["Blond", , "Female"]
HairEyeColor["Red", , ]
HairEyeColor["Red", , , drop=FALSE]
HairEyeColor["Red", , ]
mode(HairEyeColor)
HairEyeColor[1, 1, 1]
HairEyeColor[1, 1, 1] <- "50"
HairEyeColor
mode(HairEyeColor)
an_array <- array(1:20, dim = c(2,5,2))
(an_array <- array(1:20, dim = c(2,5,2)))
data_vector <- 1:20
all(an_array == data_vector)
a_num_vector <- 1:10
a_char_vector <- "A single element"
a_matrix <- matrix(1:6, nrow = 2, ncol = 3)
mode(a_numvector)
a_matrix <- matrix(1:6, nrow = 2, ncol = 3)
a_num_vector
a_char_vector
a_matrix
(lst1 <- list(Numeric_vector = a_num_vector,
Character_vector = a_char_vector,
Matrix = a_matrix))
lst1[1]
is.list(lst1[1])
lst1[2]
lst1[3]
is.list(lst1[3])
lst1[["Numeric_vector"]]
lst1$Numeric_vector
names(lst1)
lst1[1]
lst1[[1]]
lst[1][[1]]
lst[1][[1]][1]
lst1[1][[1]]
lst1[1][[1]][1:5]
lst1[1][1:5]
lst1[1][[1]][1:5]
lst1
lst1[2]
lst1[[2]][1:5]
lst1$Numeric_vector[1:5]
lst1$Numeric_vector[1:5, drop=FALSE]
Matrix = a_matrix))
## indexing a list with a single bracket gives back a list
lst1[1]
is.list(lst1[1])
lst1[2]
lst1[3]
is.list(lst1[3])
# indexing a single list element with double square bracket or the dollar sign and the names of the  list element
## gives back an object in list elements original data structure
lst1[["Numeric_vector"]]
lst1$Numeric_vector
names(lst1)
lst1[1]
lst1[[1]]
lst1[1][[1]][1:5]
lst1[1][[1]][1:5]
lst1
lst1$Numeric_vector[1:5]
lst1$Numeric_vector[1:5, drop=FALSE]
lst1$Matrix[2, 2:3]
lst1[[c(1, 10)]]
parent_list <- list(some_list = lst1,
another_list = list(A = 10:1,
B = 1:10
)
)
grndparent_list <- list(first = parent_list,
second = "useless comment")
parent_list
grndparent_list
grndparent_list
str(grndparent_list)
lst1
grndparent_list$first$some_list$Matrix[2][3]
grndparent_list$first$some_list$Matrix[2,3]
grndparent_list[[1][1][3]][2,3]
grndparent_list[[1]]] [[[1]] [[3]] [2,3]
grndparent_list[[1]] [[1]] [[3]] [2,3]
list_copy <- grandparent_list
str(grndparent_list)
list_copy$Third <- array(8:1, dim = c(2, 2, 2))
list_copy <- grandparent_list
list_copy$Third <- array(8:1, dim = c(2, 2, 2))
list_copy <- grndparent_list
list_copy$Third <- array(8:1, dim = c(2, 2, 2))
list_copy <- grndparent_list
list_copy$Third <- array(8:1, dim = c(2, 2, 2))
list_copy$First <- NULL
str(list_copy)
Character_vector = a_char_vector,
(lst1 <- list(Numeric_vector = a_num_vector,
Character_vector = a_char_vector,
Matrix = a_matrix))
## indexing a list with a single bracket gives back a list
lst1[1]
is.list(lst1[1])
lst1[2]
lst1[3]
is.list(lst1[3])
# indexing a single list element with double square bracket or the dollar sign and the names of the  list element
## gives back an object in list elements original data structure
lst1[["Numeric_vector"]]
lst1$Numeric_vector
names(lst1)
lst1[1]
lst1[[1]]
lst1[1][[1]][1:5]
lst1[1][[1]][1:5]
lst1
lst1$Numeric_vector[1:5]
lst1$Numeric_vector[1:5, drop=FALSE]
lst1$Matrix[2, 2:3]
lst1$Numeric_vector[1:5, drop=FALSE]
lst1$Matrix[2, 2:3]
lst1[[c(1, 10)]]
# recursive list
parent_list <- list(some_list = lst1,
another_list = list(A = 10:1,
B = 1:10
)
)
grndparent_list <- list(first = parent_list,
second = "useless comment")
parent_list
grndparent_list
str(grndparent_list)
lst1
grndparent_list$first$some_list$Matrix[2,3]
grndparent_list[[1]] [[1]] [[3]] [2,3]
list_copy <- grndparent_list
list_copy$Third <- array(8:1, dim = c(2, 2, 2))
list_copy$First <- NULL
str(list_copy)
list_copy <- grndparent_list
list_copy$Third <- array(8:1, dim = c(2, 2, 2))
list_copy$first <- NULL
str(list_copy)
lapply(grndparent_list$first$another_list, sum)
sapply(grndparent_list$first$another_list, sum)
sapply(grndparernt_list$first$another_list, range)
sapply(grndparent_list$first$another_list, range)
lapply(grndparent_list$first$another_list, range)
list2 <- list(v1 = rep(1, 10),
v2 = rep(1:2, 5),
v3 = rep(1:5, 2)
source("~/EOS/prep/R_Script/11_nov_practice.R", echo=TRUE)
)
sapply(list2, unique)
list2 <- list(v1 = rep(1, 10),
v2 = rep(1:2, 5),
v3 = rep(1:5, 2)
)
sapply(list2, unique)
sapply(list2, function(x) x[1] + x[2] - x[5])
list_a <- list(a1 = c(120, 80, 70, 160, 130),
a2 = c(1000, 300, 400, 800, 200))
listb <- list(b1 = 2, b2 = 5)
rm(listb)
list_a <- list(a1 = c(120, 80, 70, 160, 130),
a2 = c(1000, 300, 400, 800, 200))
list_b <- list(b1 = 2, b2 = 5)
mapply(function(x, y)
x[y],
list_a,
list_b,
SIMPLIFY = TRUE
)
(df1 <- data.frame(Income = c(1300, 3500, 900, 6800, 2700),
Age = c(21, 30, 16, 70, 35),
Comment = c("None", "None", "None", "Error?", "None"),
Imputed = c(rep(FALSE, 4), TRUE)
))
str(df1)
df1[3, "Age"]
mean(df1$Income)
subset(df1, Imputed == TRUE)
?subset.default
df1$age_groupe <- cut(
df1$Age,
breaks = c(0,25, 50, 100),
labels = c("Young", "Middle", "Old"),
right = TRUE)
df1$age_groupe
df1$Age
df1$age_groupe
str(df1)
df1
as.numeric(df1$age_groupe)
numbers <- c(3, 10, 1, 3, 7, 7, 5, 1)
a_factor <- factor(numbers)
a_factor
as.numeric(a_factor)
as.numeric(as.character((a_factor))
as.numeric(as.character(a_factor))
as.numeric(df1$age_groupe)
numbers <- c(3, 10, 1, 3, 7, 7, 5, 1)
a_factor <- factor(numbers) #### unique numbers from the vector
a_factor
as.numeric(a_factor)
as.numeric(as.character(a_factor))
numbers <- c(3, 10, 1, 3, 7, 7, 5, 1)
a_factor <- factor(numbers) #### unique numbers from the vector
a_factor
str(a_factor)
as.numeric(a_factor)
str(a_factor)
as.numeric(as.character(a_factor)) # labels back to numeric vector
some_codes <- c(3, 2, 3, 3, 1, 1, 2)
############################################################
some_codes <- c(3, 2, 3, 3, 1, 1, 2)
factors(some_codes,
levels = 1:3,
labels = c("Low", "Medium", "High")
)
some_codes <- c(3, 2, 3, 3, 1, 1, 2)
factor(some_codes,
levels = 1:3,
labels = c("Low", "Medium", "High")
)
head(ToothGrowth)
proper_list <- split(ToothGrowth, ToothGrowth$supp) ### neww only one element
str(proper_list)
len
attach(ToothGrowth)
head(len)
len[1]<- 50
head(len)
head(ToothGrowth, 1); detach(ToothGrowth)
head(ToothGrowth, 1:3); detach(ToothGrowth)
###### elements (columns) are called directly
len
attach(ToothGrowth)
head(len)
len
with(ToothGrowth, c(max(len), max(dose)))
